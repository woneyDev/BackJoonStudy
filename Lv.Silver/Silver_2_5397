import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        try (BufferedReader br          = new BufferedReader(new InputStreamReader(System.in));
             BufferedWriter bw          = new BufferedWriter(new OutputStreamWriter(System.out))) {

            int size                    = Integer.parseInt(br.readLine());

            for ( int i = 0; i < size; i ++ ) {
                String encryptPwd       = br.readLine();

                bw.write(decrypt(encryptPwd));
                if ( i < size -1 ) bw.append("\n");
            }
            bw.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    static String decrypt ( String encryptPwd ) {

        StringBuilder sb                = new StringBuilder();
        Stack<Character> pre            = new Stack<>();
        Stack<Character> post           = new Stack<>();

        for ( int i = 0; i < encryptPwd.length(); i ++ ) {
            char chr                    = encryptPwd.charAt(i);

            switch ( chr ) {
                case '<':
                    if ( !pre.isEmpty() ) post.push(pre.pop());
                    break;
                case '>':
                    if ( !post.isEmpty() ) pre.push(post.pop());
                    break;
                case '-':
                    if ( !pre.isEmpty() ) pre.pop();
                    break;
                default:
                    pre.push(encryptPwd.charAt(i));
                    break;
            }
        }

        while ( !post.isEmpty() ) {
            pre.push(post.pop());
        }

        for ( int j = 0; j < pre.size(); j ++ ) sb.append(pre.elementAt(j));

        return sb.toString();
    }
}
