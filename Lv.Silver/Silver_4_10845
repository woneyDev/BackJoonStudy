import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) {
        try (BufferedReader br          = new BufferedReader(new InputStreamReader(System.in));
             BufferedWriter bw          = new BufferedWriter(new OutputStreamWriter(System.out))) {

            int size                    = Integer.parseInt(br.readLine());
            int push                    = 0;
            int pop                     = 0;

            String order                = "";

            Queue<Integer> que          = new LinkedList<>();

            for ( int i = 0; i < size; i ++ ) {
                StringTokenizer st      = new StringTokenizer(br.readLine(), " ");
                order                   = st.nextToken();

                switch ( order ) {
                    case "push" :
                        push            = Integer.parseInt(st.nextToken());
                        pop             = push;
                        que.offer(push);
                        break;
                    case "pop" :
                        bw.write(que.isEmpty() ? "-1\n" : que.poll() + "\n");
                        break;
                    case "size" :
                        bw.write(que.size() + "\n");
                        break;
                    case "empty" :
                        bw.write(que.isEmpty() ? "1\n" : "0\n");
                        break;
                    case "front" :
                        bw.write(que.isEmpty() ? "-1\n" : que.peek() + "\n");
                        break;
                    case "back" :
                        bw.write(que.isEmpty() ? "-1\n" : pop + "\n");
                        break;
                }
            }
            bw.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
